#!/usr/bin/python3

#######
### TODO:
### NEXT STEP: BUILD A CLEANER CODE
### STARTED THIS OBJECTIVE WITH THE MODELING LANGUAGES
### APPLY THE PRINCIPLE TO THE REST OF THE CODE!
#######

from ortools.linear_solver import pywraplp
import mip
import gurobipy as gp

import numpy as np
import re
import sys
import json

import argparse

def build_OR_Tools_model(A, b, c, n, var_range, row_range, leq_constraints, 
geq_constraints, var_type, obj_type, ub_inputs, lb_inputs, SOLVER_NAME):
    # Create the solver object and the infinity value:
    solver = pywraplp.Solver.CreateSolver(SOLVER_NAME)
    infinity = solver.infinity()

    # Processing the upper and lower bounds using the OR-Tools infinity:
    if(isinstance(ub_inputs, np.ndarray)):
        if(len(ub_inputs) != n):
            raise RuntimeError('Shape of ub array is incompatible with problem size!')
    elif(isinstance(ub_inputs, float)):
        ub_inputs = np.full(n, ub_inputs)
    else:
        ub_inputs = np.full(n, infinity)

    if(isinstance(lb_inputs, np.ndarray)):
        if(len(lb_inputs) != n):
            raise RuntimeError('Shape of lb array is incompatible with problem size!')
    elif(isinstance(lb_inputs, float)):
        lb_inputs = np.full(n, lb_inputs)
    else:
        lb_inputs = np.full(n, 0.0)

    # Creating the variables:
    x = dict()
    for j in var_range:
        if(var_type[j] == 'real'):
            x[j] = solver.NumVar(lb_inputs[j-1], ub_inputs[j-1], 'x[{}]'.format(j))
        elif(var_type[j] == 'binary'):
            x[j] = solver.BoolVar('x[{}]'.format(j))
        else:
            x[j] = solver.IntVar(lb_inputs[j-1], ub_inputs[j-1], 'x[{}]'.format(j))

    # Objective Function
    if(obj_type == '*EMPTY*'):
        obj_type = 'min'
    if(obj_type == 'min'):
        obj = solver.Minimize(sum(c[j] * x[j] for j in var_range))
    elif(obj_type == 'max'):
        obj = solver.Maximize(sum(c[j] * x[j] for j in var_range))
    else:
        raise RuntimeError('Problem in the objective function type input!')

    # Adding the constraints sets:
    cstr = dict()
    if(leq_constraints == '*'):
        cstr.update({'leq_{}'.format(i): solver.Add(sum(A[i, j] * x[j] for j in var_range) <= b[i]) for i in row_range})
    else:
        cstr.update({'leq_{}'.format(i): solver.Add(sum(A[i, j] * x[j] for j in var_range) <= b[i]) for i in leq_constraints})

    if(geq_constraints == '*'):
        cstr.update({'geq_{}'.format(i): solver.Add(sum(A[i, j] * x[j] for j in var_range) >= b[i]) for i in row_range})
    else:
        cstr.update({'geq_{}'.format(i): solver.Add(sum(A[i, j] * x[j] for j in var_range) >= b[i]) for i in geq_constraints})

    if(leq_constraints != '*' and geq_constraints != '*'):
        eq_constraints = set(row_range).difference(set(leq_constraints).union(set(geq_constraints)))
        cstr.update({'eq_{}'.format(i): solver.Add(sum(A[i, j] * x[j] for j in var_range) == b[i]) for i in eq_constraints})

    return solver, x, obj, cstr

def solve_OR_Tools_model(solver, TOTAL_SOLVING_TIME, NUM_THREADS, RELATIVE_MIP_GAP_VALUE, PRINT_SOLUTION_LOG):
    # Solving the problem and printing results:
    if(TOTAL_SOLVING_TIME > 0):
        solver.set_time_limit(TOTAL_SOLVING_TIME * 1000)
    if(PRINT_SOLUTION_LOG):
        solver.EnableOutput()
    solver.SetNumThreads(NUM_THREADS)
    if(RELATIVE_MIP_GAP_VALUE > 0):
        solverParams = pywraplp.MPSolverParameters()
        solverParams.SetDoubleParam(solverParams.RELATIVE_MIP_GAP, RELATIVE_MIP_GAP_VALUE)
        status = solver.Solve(solverParams)
    else:
        status = solver.Solve()

    return status

def print_OR_Tools_solution(n, var_range, x, obj_type, solver, status, DIGITS_ON_SOLUTION, PRINT_ZERO_VARS):
    print('Variables defined: x[{}], ..., x[{}].'.format(1, n))
    print('Objective function being considered: {}'.format(obj_type.upper()))
    if((status == solver.FEASIBLE) or (status == solver.OPTIMAL)):
        ObjVal = solver.Objective().Value()
        print('Objective found with value: {}'.format(round(ObjVal, DIGITS_ON_SOLUTION)))
        if(status == solver.FEASIBLE):
            print('The solution found is FEASIBLE!')
        else:
            print('The solution found is OPTIMAL!')
        print('Variables values:')
        if(PRINT_ZERO_VARS):
            for j in var_range:
                print('x[{}] = {}'.format(j, round(x[j].solution_value(), DIGITS_ON_SOLUTION)))
        else:
            for j in var_range:
                if(x[j].solution_value() != 0):
                    print('x[{}] = {}'.format(j, round(x[j].solution_value(), DIGITS_ON_SOLUTION)))
    elif(status == solver.UNBOUNDED):
        print('The problem is unbounded!')
    else:
        print('No solution found!')

def build_Gurobipy_model(A, b, c, n, var_range, row_range, leq_constraints, 
geq_constraints, var_type, obj_type, ub_inputs, lb_inputs, MEMORY_LIMIT):
    if(MEMORY_LIMIT):
        env = gp.Env(empty=True)
        env.setParam("MemLimit", MEMORY_LIMIT)
        env.start()
        solver = gp.Model(env=env)
    else:
        solver = gp.Model()
    infinity = float('INF')

    # Processing the upper and lower bounds using the OR-Tools infinity:
    if(isinstance(ub_inputs, np.ndarray)):
        if(len(ub_inputs) != n):
            raise RuntimeError('Shape of ub array is incompatible with problem size!')
    elif(isinstance(ub_inputs, float)):
        ub_inputs = np.full(n, ub_inputs)
    else:
        ub_inputs = np.full(n, infinity)

    if(isinstance(lb_inputs, np.ndarray)):
        if(len(lb_inputs) != n):
            raise RuntimeError('Shape of lb array is incompatible with problem size!')
    elif(isinstance(lb_inputs, float)):
        lb_inputs = np.full(n, lb_inputs)
    else:
        lb_inputs = np.full(n, 0.0)

    # Creating the variables:
    x = dict()
    for j in var_range:
        if(var_type[j] == 'real'):
            x[j] = solver.addVar(lb=lb_inputs[j-1], ub=ub_inputs[j-1], name='x[{}]'.format(j))
        elif(var_type[j] == 'binary'):
            x[j] = solver.addVar(vtype=gp.GRB.BINARY, name='x[{}]'.format(j))
        else:
            x[j] = solver.addVar(vtype=gp.GRB.INTEGER, lb=lb_inputs[j-1], ub=ub_inputs[j-1], name='x[{}]'.format(j))

    # Objective Function
    if(obj_type == '*EMPTY*'):
        obj_type = 'min'
    if(obj_type == 'min'):
        obj = solver.setObjective(gp.quicksum(c[j] * x[j] for j in var_range), sense=gp.GRB.MINIMIZE)
    elif(obj_type == 'max'):
        obj = solver.setObjective(gp.quicksum(c[j] * x[j] for j in var_range), sense=gp.GRB.MAXIMIZE)
    else:
        raise RuntimeError('Problem in the objective function type input!')

    # Adding the constraints sets:
    cstr = dict()
    if(leq_constraints == '*'):
        cstr.update({'leq_{}'.format(i): solver.addConstr(
            gp.quicksum(A[i, j] * x[j] for j in var_range) <= b[i]) for i in row_range}
        )
    else:
        cstr.update({'leq_{}'.format(i): solver.addConstr(
            gp.quicksum(A[i, j] * x[j] for j in var_range) <= b[i]) for i in leq_constraints}
        )
    if(geq_constraints == '*'):
        cstr.update({'leq_{}'.format(i): solver.addConstr(
            gp.quicksum(A[i, j] * x[j] for j in var_range) >= b[i]) for i in row_range}
        )
    else:
        cstr.update({'leq_{}'.format(i): solver.addConstr(
            gp.quicksum(A[i, j] * x[j] for j in var_range) >= b[i]) for i in geq_constraints}
        )
    if(leq_constraints != '*' and geq_constraints != '*'):
        eq_constraints = set(row_range).difference(set(leq_constraints).union(set(geq_constraints)))
        cstr.update({'leq_{}'.format(i): solver.addConstr(
            gp.quicksum(A[i, j] * x[j] for j in var_range) == b[i]) for i in eq_constraints}
        )

    return solver, x, obj, cstr

def solve_Gurobipy_model(solver, TOTAL_SOLVING_TIME, NUM_THREADS, RELATIVE_MIP_GAP_VALUE, 
PRINT_SOLUTION_LOG, NODEFILE_START_SIZE):
    # Solving the problem and printing results:
    if(TOTAL_SOLVING_TIME > 0):
        solver.setParam('TimeLimit', TOTAL_SOLVING_TIME)
    if(PRINT_SOLUTION_LOG):
        solver.setParam('LogToConsole', 1)
    else:
        solver.setParam('LogToConsole', 0)
    solver.setParam('Threads', NUM_THREADS)
    if(RELATIVE_MIP_GAP_VALUE > 0):
        solver.setParam('MIPGap', RELATIVE_MIP_GAP_VALUE)
    if(NODEFILE_START_SIZE):
        solver.setParam("NodefileStart", NODEFILE_START_SIZE)
    solver.optimize()

    return solver.Status

def print_Gurobipy_solution(n, var_range, x, obj_type, solver, status, DIGITS_ON_SOLUTION, PRINT_ZERO_VARS):
    print('Variables defined: x[{}], ..., x[{}].'.format(1, n))
    print('Objective function being considered: {}'.format(obj_type.upper()))
    if((status == gp.GRB.SUBOPTIMAL) or (status == gp.GRB.OPTIMAL)):
        ObjVal = solver.ObjVal
        print('Objective found with value: {}'.format(round(ObjVal, DIGITS_ON_SOLUTION)))
        if(status == gp.GRB.SUBOPTIMAL):
            print('The solution found is FEASIBLE!')
        else:
            print('The solution found is OPTIMAL!')
        print('Variables values:')
        if(PRINT_ZERO_VARS):
            for j in var_range:
                print('x[{}] = {}'.format(j, round(x[j].X, DIGITS_ON_SOLUTION)))
        else:
            for j in var_range:
                if(x[j].X != 0):
                    print('x[{}] = {}'.format(j, round(x[j].X, DIGITS_ON_SOLUTION)))
    elif(status == gp.GRB.UNBOUNDED):
        print('The problem is unbounded!')
    else:
        print('No solution found!')

    return status

def build_Python_MIP_model(A, b, c, n, var_range, row_range, leq_constraints, 
geq_constraints, var_type, obj_type, ub_inputs, lb_inputs, SOLVER_NAME):
    # Processing objective type:
    if(obj_type == '*EMPTY*'):
        obj_type = 'min'
    if(obj_type == 'min'):
        model_sense = mip.MINIMIZE
    elif(obj_type == 'max'):
        model_sense = mip.MAXIMIZE
    else:
        raise RuntimeError('Problem in the objective function type input!')

    # Setting up the selected optimization solver:
    if(SOLVER_NAME.upper()=="CBC"):
        solver = mip.Model(solver_name=mip.CBC, sense=model_sense)
    elif(SOLVER_NAME.upper()=="GUROBI"):
        solver = mip.Model(solver_name=mip.GUROBI, sense=model_sense)
    else:
        raise NameError('Invalid Solver name!')

    infinity = mip.INF

    # Processing the upper and lower bounds using the OR-Tools infinity:
    if(isinstance(ub_inputs, np.ndarray)):
        if(len(ub_inputs) != n):
            raise RuntimeError('Shape of ub array is incompatible with problem size!')
    elif(isinstance(ub_inputs, float)):
        ub_inputs = np.full(n, ub_inputs)
    else:
        ub_inputs = np.full(n, infinity)

    if(isinstance(lb_inputs, np.ndarray)):
        if(len(lb_inputs) != n):
            raise RuntimeError('Shape of lb array is incompatible with problem size!')
    elif(isinstance(lb_inputs, float)):
        lb_inputs = np.full(n, lb_inputs)
    else:
        lb_inputs = np.full(n, 0.0)

    # Creating the variables:
    x = dict()
    for j in var_range:
        if(var_type[j] == 'real'):
            x[j] = solver.add_var(lb=lb_inputs[j-1], ub=ub_inputs[j-1], name='x[{}]'.format(j))
        elif(var_type[j] == 'binary'):
            x[j] = solver.add_var(var_type=mip.BINARY, name='x[{}]'.format(j))
        else:
            x[j] = solver.add_var(var_type=mip.INTEGER, lb=lb_inputs[j-1], ub=ub_inputs[j-1], name='x[{}]'.format(j))

    # Objective Function
    solver.objective = mip.xsum(c[j] * x[j] for j in var_range)
    obj = solver.objective

    # Adding the constraints sets:
    cstr = dict()
    if(leq_constraints == '*'):
        for i in row_range:
            solver += mip.xsum(A[i, j] * x[j] for j in var_range) <= b[i]
    else:
        for i in leq_constraints:
            solver += mip.xsum(A[i, j] * x[j] for j in var_range) <= b[i]

    if(geq_constraints == '*'):
        for i in row_range:
            solver += mip.xsum(A[i, j] * x[j] for j in var_range) >= b[i]
    else:
        for i in geq_constraints:
            solver += mip.xsum(A[i, j] * x[j] for j in var_range) >= b[i]

    if(leq_constraints != '*' and geq_constraints != '*'):
        eq_constraints = set(row_range).difference(set(leq_constraints).union(set(geq_constraints)))
        for i in eq_constraints:
            solver += mip.xsum(A[i, j] * x[j] for j in var_range) == b[i]

    return solver, x, obj, cstr

def solve_Python_MIP_model(solver, TOTAL_SOLVING_TIME, NUM_THREADS, RELATIVE_MIP_GAP_VALUE, PRINT_SOLUTION_LOG, CHECK_CLIQUE_MERGE):
    # Solving the problem and printing results:
    if(TOTAL_SOLVING_TIME > 0):
        solver.max_seconds = TOTAL_SOLVING_TIME
    if(PRINT_SOLUTION_LOG):
        solver.verbose = 1
    else:
        solver.verbose = 0
    if(CHECK_CLIQUE_MERGE):
        solver.clique_merge()
    solver.threads = NUM_THREADS
    if(RELATIVE_MIP_GAP_VALUE > 0):
        solver.max_mip_gap = RELATIVE_MIP_GAP_VALUE
    status = solver.optimize()

    return status

def print_Python_MIP_solution(n, var_range, x, obj_type, solver, status, DIGITS_ON_SOLUTION, PRINT_ZERO_VARS):
    print('Variables defined: x[{}], ..., x[{}].'.format(1, n))
    print('Objective function being considered: {}'.format(obj_type.upper()))
    if((status == mip.OptimizationStatus.FEASIBLE) or (status == mip.OptimizationStatus.OPTIMAL)):
        ObjVal = solver.objective_value
        print('Objective found with value: {}'.format(round(ObjVal, DIGITS_ON_SOLUTION)))
        if(status == mip.OptimizationStatus.FEASIBLE):
            print('The solution found is FEASIBLE!')
        else:
            print('The solution found is OPTIMAL!')
        print('Variables values:')
        if(PRINT_ZERO_VARS):
            for j in var_range:
                print('x[{}] = {}'.format(j, round(x[j].x, DIGITS_ON_SOLUTION)))
        else:
            for j in var_range:
                if(x[j].x != 0):
                    print('x[{}] = {}'.format(j, round(x[j].x, DIGITS_ON_SOLUTION)))
    elif(status == mip.OptimizationStatus.UNBOUNDED):
        print('The problem is unbounded!')
    else:
        print('No solution found!')

    return status

def process_matrix_input_data():
    pass

def process_json_input_data():
    pass

def process_mps_input_data():
    pass

def main():
    # Default solve_lp parameters:
    ACCEPTED_SOLVERS = ['BOP', 'CBC', 'CLP', 'CPLEX', 'GLOP', 'GLPK', 'GUROBI', 'PDLP', 'SAT', 'SCIP', 'XPRESS']
    ACCEPTED_MODELING_LANGUAGES = ['GUROBIPY', 'OR-TOOLS', 'PYTHON-MIP']
    DEFAULT_SOLVER = 'SCIP'
    DEFAULT_MODELING_LANGUAGE = 'OR-TOOLS'
    DEFAULT_SOLVING_TIME = 30
    DEFAULT_DIGITS_ON_SOLUTION = 5
    DEFAULT_NUM_THREADS = 1
    DEFAULT_MIP_GAP = 10**(-5)
    DEFAULT_INPUT_TYPE = 'matrix'

    # Building the argument parser:
    parser = argparse.ArgumentParser(prog='solve_lp', 
        allow_abbrev=False,
        description = '''Solve_lp is a CLI used to solve linear programming problems in a simple way.''',
        epilog='''***This is a Python3 script built with educational purposes, and so it is not intended to be used
        in large production environments.***
        
        More informations can be found at https://github.com/Eduardo281/solve_lp.'''
    )

    parser.add_argument('-f', '--file', nargs=1, metavar="INPUT_FILE_PATH", type=str,
        default=None, help= 'Path to the data file to be used')
    parser.add_argument('-t', '--time', nargs = 1, metavar = "TOTAL_SOLVING_TIME", type = int,
        default=None, help = "Total allowed time for the solver to work (in seconds).")
    parser.add_argument('-g', '--gap', nargs = 1, metavar = "REL_MIP_GAP_VALUE", type = float,
        default=None, help = "Relative MIP GAP value to be considered.")
    parser.add_argument('-s', '--solver', nargs = 1, metavar = "SOLVER_NAME", type = str,
        default=None, help = "Which solver to use in the solution procedure. Remember that not all solvers can solve Integer/Mixed Integer problems!")
    parser.add_argument('-d', '--digits', nargs = 1, metavar = "DIGITS_ON_SOLUTION", type = int,
        default=None, help = "How many digits to be considered in the final solution display.")
    parser.add_argument('-r', '--threads', nargs = 1, metavar='NUM_THREADS', type=int,
        default=None, help = 'Number of threads to be used by the solver')

    parser.add_argument('--memory-limit', nargs = 1, metavar='MEMORY_LIMIT_IN_GB', type=int,
        dest='memory_limit', default=None, help = '(only available using gurobipy)')
    parser.add_argument('--nodefile-start-size', nargs = 1, metavar='NODEFILE_START_SIZE_IN_GB', type=int,
        dest='nodefile_start_size', default=None, help = '(only available on gurobipy)')

    parser.add_argument('-m', '--modeling-language', nargs=1, metavar='MODELING_LANGUAGE', type=str,
        default=None, dest='modeling_language', 
        help = 'Which modeling language to use. Available: GUROBIPY, OR-TOOLS and PYTHON-MIP.')
    parser.add_argument('--help-with-solvers', action='store_true', default=None, 
        dest='PRINT_HELP_WITH_SOLVERS', help='Prints out a detailed description of the available solvers.')

    zeros_meg_parser = parser.add_mutually_exclusive_group(required=False)
    zeros_meg_parser.add_argument('--zeros', dest='zeros', action='store_true')
    zeros_meg_parser.add_argument('--no-zeros', dest='zeros', action='store_false')
    zeros_meg_parser.set_defaults(zeros=False)

    log_meg_parser = parser.add_mutually_exclusive_group(required=False)
    log_meg_parser.add_argument('--log', dest='log', action='store_true')
    log_meg_parser.add_argument('--no-log', dest='log', action='store_false')
    log_meg_parser.set_defaults(log=False)

    verbose_meg_parser = parser.add_mutually_exclusive_group(required=False)
    verbose_meg_parser.add_argument('--verbose', dest='verbose', action='store_true')
    verbose_meg_parser.add_argument('--no-verbose', dest='verbose', action='store_false')
    verbose_meg_parser.set_defaults(verbose=False)

    verbose_meg_parser = parser.add_mutually_exclusive_group(required=False)
    verbose_meg_parser.add_argument('--check_clique_merge', dest='clique_merge', action='store_true')
    verbose_meg_parser.add_argument('--no-check_clique_merge', dest='clique_merge', action='store_false')
    verbose_meg_parser.set_defaults(clique_merge=False)

    input_type_meg_parser = parser.add_mutually_exclusive_group(required=False)
    input_type_meg_parser.add_argument('--matrix-input', dest='input_type', action='store_const', const='matrix')
    input_type_meg_parser.add_argument('--model-input', dest='input_type', action='store_const', const='model')
    input_type_meg_parser.add_argument('--json-input', dest='input_type', action='store_const', const='json')
    input_type_meg_parser.set_defaults(input_type=None)

    args = parser.parse_args()

    if(args.PRINT_HELP_WITH_SOLVERS):
        print('*****')
        print("Solve_LP uses the OR-Tools module from Google as modeling language, and so it offers support to different linear optimization solvers.")
        print("Here we show a brief description of this support, based on the documentation made available by the OR-Tools developers.")
        print("For more information please refer to the solvers/or-tools documentations.")
        print()
        print('*) BOP: Boolean/Integer Problems solver developed by Google. A free option to face IP problems. It is recommended to always set a maximum solution time when using BOP!')
        print('*) CBC: COIN_OR Branch-and-Cut solver. It is a general purpose open-source MILP solver from COIN-OR.')
        print('*) CLP: COIN-OR Linear Programming Solver. It is an open-source LP solver from COIN-OR.')
        print('*) CPLEX: A solver developed by IBM that can be used to tackle MILP problems. It is a proprietary solver, and so users need to have a license to use.')
        print('*) GLOP: Google Linear Optimization Problems solver. Developed to solve only LP problems, it is an open source project made available by Google since 2014.')
        print('*) GLPK: GNU Linear Programming Kit. Requires user license. Free?')
        print('*) GUROBI: A solver developed by the Gurobi Optimization group that can be used to tackle MILP problems. It is a proprietary solver, and so users need to have a license to use.')
        print('*) PDLP: Google First Order LP solver (...)')
        print('*) SAT: A free option to solver IP problems (It is the Google Constraints Programming SAT-Based solver?)')
        print('*) SCIP: Solving Constraint Integer Programs. A non-commercial solver that can be used to solve general MILP models.')
        print('*) XPRESS:A solver developed by the FICO group that can be used to tackle MILP problems. It is a proprietary solver, and so users need to have a license to use.')
        print('Where...')
        print('BP = Binary Programming (only binary variables);')
        print('IP = Integer Programming (integer and/or binary variables)')
        print('LP = Linear Programming (only real variables)')
        print('MILP = Mixed Integer Linear Programming (real and integer/binary variables).')
        print()
        print('General notes:')
        print('-) Proprietary solvers may have problems to find the license file of the user. Please refer to the OR-Tools documentation to find help setting environment variables to use these solvers;')
        print('-) MILP solvers may be used to solve LP problems without any difference in the user inputs.')
        print('*****')
        sys.exit(100)

    if(not args.file):
        raise RuntimeError('The following argument is required: -f/--file')

    # Setting up the solver configs:
    INPUT_FILE_PATH = args.file[0]

    if(args.input_type):
        INPUT_TYPE = args.input_type
    else:
        INPUT_TYPE = DEFAULT_INPUT_TYPE

    PRINT_ZERO_VARS = args.zeros
    PRINT_SOLUTION_LOG = args.log
    VERBOSE_PRINT = args.verbose
    CHECK_CLIQUE_MERGE = args.clique_merge

    if(args.time):
        TOTAL_SOLVING_TIME = args.time[0]
    else:
        TOTAL_SOLVING_TIME = DEFAULT_SOLVING_TIME
    
    if(args.digits):
        DIGITS_ON_SOLUTION = args.digits[0]
    else:
        DIGITS_ON_SOLUTION = DEFAULT_DIGITS_ON_SOLUTION

    if(args.solver):
        if(args.solver[0].upper() not in ACCEPTED_SOLVERS):
            print('The solvers available are:')
            print(ACCEPTED_SOLVERS)
            print('Input received was: {}'.format(args.solver[0]))
            raise ValueError('Did not find solver with the specified name!')
        SOLVER_NAME = args.solver[0]
    else:
        SOLVER_NAME = DEFAULT_SOLVER

    if(args.modeling_language):
        if(args.modeling_language[0].upper() not in ACCEPTED_MODELING_LANGUAGES):
            print('The modeling languages available are:')
            print(ACCEPTED_MODELING_LANGUAGES)
            print('Input received was: {}'.format(args.modeling_language[0]))
            raise ValueError('Did not find solver with the specified name!')
        MODELING_LANGUAGE_NAME = args.modeling_language[0].upper()
    else:
        MODELING_LANGUAGE_NAME = DEFAULT_MODELING_LANGUAGE

    if(args.threads):
        NUM_THREADS = args.threads[0]
    else:
        NUM_THREADS = DEFAULT_NUM_THREADS

    if(args.gap):
        RELATIVE_MIP_GAP_VALUE = args.gap[0]
    else:
        RELATIVE_MIP_GAP_VALUE = DEFAULT_MIP_GAP

    if(args.memory_limit):
        MEMORY_LIMIT = args.memory_limit[0]
    else:
        MEMORY_LIMIT = None

    if(args.nodefile_start_size):
        NODEFILE_START_SIZE = args.nodefile_start_size[0]
    else:
        NODEFILE_START_SIZE = None

    if(VERBOSE_PRINT):
        print('Solve_LP started!')
        print()
        print('Reading input data file...')

    # Reading the data file and processing the inputs:
    leq_constraints = '*EMPTY*'
    geq_constraints = '*EMPTY*'
    bin_vars = '*EMPTY*'
    int_vars = '*EMPTY*'
    obj_type = '*EMPTY*'
    ub_inputs = '*EMPTY*'
    lb_inputs = '*EMPTY*'

    if(INPUT_TYPE == 'json'):
        with open(INPUT_FILE_PATH) as file:
            data_json = json.load(file)
        c = data_json['c']
        b = data_json['b']
        A = data_json['A']
        if('obj' in data_json.keys()):
            obj_type = data_json['obj']
        if('leq' in data_json.keys()):
            if(data_json['leq'] == [-1]):
                leq_constraints = '*'
            else:
                leq_constraints = data_json['leq']
        if('geq' in data_json.keys()):
            if(data_json['geq'] == [-1]):
                geq_constraints = '*'
            else:
                geq_constraints = data_json['geq']
        if('bin' in data_json.keys()):
            if(data_json['bin'] == [-1]):
                bin_vars = '*'
            else:
                bin_vars = data_json['bin']
        if('int' in data_json.keys()):
            if(data_json['int'] == [-1]):
                int_vars = '*'
            else:
                int_vars = data_json['int']
        if('ub' in data_json.keys()):
            ub_inputs = data_json['ub']
        if('lb' in data_json.keys()):
            lb_inputs = data_json['lb']
    elif(INPUT_TYPE == 'matrix'):
        c = list()
        b = list()
        A = list()
        present_A_line = 0
        scanning_A_matrix = False
        var_type = dict()
        with open(INPUT_FILE_PATH) as file:
            for raw_line in file:
                line = raw_line.strip()

                if(scanning_A_matrix):
                    present_A_line += 1
                    if(re.search('[+-] ', line)):
                        raise RuntimeError('Isolated + or - signal find while reading line {} of A matrix!'.format(present_A_line))
                    A.append([float(value) for value in re.findall('[+-]?[\d]+\.[\d]+|[+-]?[\d]+', line)])
                    if(line[-1] == ';'):
                        continue
                    elif(line[-1] == ']'):
                        scanning_A_matrix = False
                    else:
                        raise RuntimeError('Did not find ; at the of line {} of A matrix'.format(present_A_line))

                if(re.search('^b[ ]*=[ ]*\[', line)):
                    if(re.search('[+-] ', line)):
                        raise RuntimeError('Isolated + or - signal find while reading b vector!')
                    b = [float(value) for value in re.findall('[+-]?[\d]+\.[\d]+|[+-]?[\d]+', line)]
                if(re.search('^c[ ]*=[ ]*\[', line)):
                    if(re.search('[+-] ', line)):
                        raise RuntimeError('Isolated + or - signal find while reading c vector!')
                    c = [float(value) for value in re.findall('[+-]?[\d]+\.[\d]+|[+-]?[\d]+', line)]
                if(re.search('^A[ ]*=[ ]*\[', line)):
                    present_A_line = 1
                    if(re.search('[+-] ', line)):
                        raise RuntimeError('Isolated + or - signal find while reading the 1st line of A matrix!')
                    A.append([float(value) for value in re.findall('[+-]?[\d]+\.[\d]+|[+-]?[\d]+', line)])
                    if(line[-1] == ']'):
                        scanning_A_matrix = False
                    else:
                        scanning_A_matrix = True

                if(re.search('^leq[ ]*=[ ]*', line)):
                    if(line[-1] == '*'):
                        leq_constraints = '*'
                        continue
                    leq_constraints = list()
                    aux_leq_cstr = re.search('=([ 0-9\-\,]+)$', line).group(1)
                    aux_leq_cstr = aux_leq_cstr.strip().split(',')
                    for entry in aux_leq_cstr:
                        if('-' in entry):
                            val1, val2 = entry.split('-')
                            val1 = int(val1.strip())
                            val2 = int(val2.strip())
                            leq_constraints.extend(list(range(val1, val2+1)))
                        else:
                            leq_constraints.append(int(entry.strip()))
                    continue

                if(re.search('^geq[ ]*=[ ]*', line)):
                    if(line[-1] == '*'):
                        geq_constraints = '*'
                        continue
                    geq_constraints = list()
                    aux_geq_cstr = re.search('=([ 0-9\-\,]+)$', line).group(1)
                    aux_geq_cstr = aux_geq_cstr.strip().split(',')
                    for entry in aux_geq_cstr:
                        if('-' in entry):
                            val1, val2 = entry.split('-')
                            val1 = int(val1.strip())
                            val2 = int(val2.strip())
                            geq_constraints.extend(list(range(val1, val2+1)))
                        else:
                            geq_constraints.append(int(entry.strip()))
                    continue

                if(re.search('^obj[ ]*=[ ]*', line)):
                    aux_obj_type = re.search('=(.*)$', line).group(1)
                    obj_type = aux_obj_type.strip().lower()
                    if((obj_type != 'min') and (obj_type != 'max')):
                        raise RuntimeError('Problem with the objective function specified!')

                if(re.search('^ub[ ]*=[ ]*', line)):
                    try:
                        ub_inputs = float(re.search('=([ 0-9\.\-]+)$', line).group(1))
                    except:
                        ub_inputs = re.search('=([ 0-9\,\.\-]+)$', line).group(1)
                        ub_inputs = ub_inputs.strip().split(',')
                        ub_inputs = np.array(ub_inputs, dtype=float)

                if(re.search('^lb[ ]*=[ ]*', line)):
                    try:
                        lb_inputs = float(re.search('=([ 0-9\.\-]+)$', line).group(1))
                    except:
                        lb_inputs = re.search('=([ 0-9\,\.\-]+)$', line).group(1)
                        lb_inputs = lb_inputs.strip().split(',')
                        lb_inputs = np.array(lb_inputs, dtype=float)

                if(re.search('^bin[ ]*=[ ]*', line)):
                    if(line[-1] == '*'):
                        bin_vars = '*'
                        continue
                    bin_vars = list()
                    aux_bin_list = re.search('=([ 0-9\-\,]+)$', line).group(1)
                    aux_bin_list = aux_bin_list.strip().split(',')
                    for entry in aux_bin_list:
                        if('-' in entry):
                            val1, val2 = entry.split('-')
                            val1 = int(val1.strip())
                            val2 = int(val2.strip())
                            bin_vars.extend(list(range(val1, val2+1)))
                        else:
                            bin_vars.append(int(entry.strip()))
                    continue

                if(re.search('^int[ ]*=[ ]*', line)):
                    if(line[-1] == '*'):
                        int_vars = '*'
                        continue
                    int_vars = list()
                    aux_int_list = re.search('=([ 0-9\-\,]+)$', line).group(1)
                    aux_int_list = aux_int_list.strip().split(',')
                    for entry in aux_int_list:
                        if('-' in entry):
                            val1, val2 = entry.split('-')
                            val1 = int(val1.strip())
                            val2 = int(val2.strip())
                            int_vars.extend(list(range(val1, val2+1)))
                        else:
                            int_vars.append(int(entry.strip()))
                    continue

    if(VERBOSE_PRINT):
        print('Data file was read!')
        print()
        print('Starting to instantiate the inputed solver ({})...'.format(SOLVER_NAME.upper()))
        print()

    # Creating the optimization model and the variables:
    b = np.array(b)
    c = np.array(c)
    A = np.array(A)

    print('b:')
    print(b)
    print()
    print('c:')
    print(c)
    print()
    print('A:')
    print(A)
    print()
    print('leq:')
    print(leq_constraints)
    print()
    print('geq:')
    print('TODO')
    print()
    print('bin:')
    print(bin_vars)
    print()
    print('int:')
    print(int_vars)
    print()
    print('obj_type:')
    print(obj_type)
    print()
    print('ub_inputs:')
    print(ub_inputs)
    print()
    print('lb_inputs:')
    print(lb_inputs)
    print()

    if(VERBOSE_PRINT):
        print('Validating data and starting to build the model...')

    if(len(b) != A.shape[0]):
        raise RuntimeError('Shapes of b and A are incompatible!')

    if(len(c) != A.shape[1]):
        raise RuntimeError('Shapes of c and A are incompatible!')

    m = A.shape[0]
    n = A.shape[1]

    A = {((i+1), (j+1)) : A[i][j] for i in range(len(A)) for j in range(len(A[i]))}
    b = {(j+1) : b[j] for j in range(len(b))}
    c = {(j+1) : c[j] for j in range(len(c))}

    var_range = range(1, n+1)
    row_range = range(1, m+1)

    var_type = {j: 'real' for j in var_range}

    if(bin_vars != '*EMPTY*'):
        if(bin_vars == '*'):
            var_type = {j: 'binary' for j in var_range}
        else:
            var_type.update({j: 'binary' for j in bin_vars})
    if(int_vars != '*EMPTY*'):
        if(int_vars == '*'):
            var_type = {j: 'int' for j in var_range}
        else:
            var_type.update({j: 'int' for j in int_vars})

    if(leq_constraints == '*EMPTY*'):
        leq_constraints = []
    if(geq_constraints == '*EMPTY*'):
        geq_constraints = []

    # Solving the model using Google's OR-Tools
    if(MODELING_LANGUAGE_NAME == 'OR-TOOLS'):
        solver, x, obj, cstr = build_OR_Tools_model(A, b, c, n, var_range, row_range, leq_constraints, 
            geq_constraints, var_type, obj_type, ub_inputs, lb_inputs, SOLVER_NAME)
        status = solve_OR_Tools_model(solver, TOTAL_SOLVING_TIME, NUM_THREADS, 
            RELATIVE_MIP_GAP_VALUE, PRINT_SOLUTION_LOG)
        print_OR_Tools_solution(n, var_range, x, obj_type, solver, status, 
            DIGITS_ON_SOLUTION, PRINT_ZERO_VARS)
    elif(MODELING_LANGUAGE_NAME == 'PYTHON-MIP'):
        solver, x, obj, cstr = build_Python_MIP_model(A, b, c, n, var_range, row_range, leq_constraints, 
            geq_constraints, var_type, obj_type, ub_inputs, lb_inputs, SOLVER_NAME)
        status = solve_Python_MIP_model(solver, TOTAL_SOLVING_TIME, NUM_THREADS, 
            RELATIVE_MIP_GAP_VALUE, PRINT_SOLUTION_LOG, CHECK_CLIQUE_MERGE)
        print_Python_MIP_solution(n, var_range, x, obj_type, solver, status, 
            DIGITS_ON_SOLUTION, PRINT_ZERO_VARS)
    elif(MODELING_LANGUAGE_NAME == 'GUROBIPY'):
        solver, x, obj, cstr = build_Gurobipy_model(A, b, c, n, var_range, row_range, leq_constraints, 
            geq_constraints, var_type, obj_type, ub_inputs, lb_inputs, MEMORY_LIMIT)
        status = solve_Gurobipy_model(solver, TOTAL_SOLVING_TIME, NUM_THREADS, 
            RELATIVE_MIP_GAP_VALUE, PRINT_SOLUTION_LOG, NODEFILE_START_SIZE)
        print_Gurobipy_solution(n, var_range, x, obj_type, solver, status, 
            DIGITS_ON_SOLUTION, PRINT_ZERO_VARS)
    else:
        raise RuntimeError('Problem processing the selected modeling language!')

    print('END OF FILE!')

if __name__ == "__main__":
    main()
